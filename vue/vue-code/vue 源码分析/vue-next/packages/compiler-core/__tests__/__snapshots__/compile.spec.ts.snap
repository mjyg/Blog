// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler: integration tests function mode 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { toString: _toString, openBlock: _openBlock, createVNode: _createVNode, createBlock: _createBlock, createCommentVNode: _createCommentVNode, Fragment: _Fragment, renderList: _renderList, createTextVNode: _createTextVNode } = _Vue
    
    return (_openBlock(), _createBlock(\\"div\\", {
      id: \\"foo\\",
      class: bar.baz
    }, [
      _createTextVNode(_toString(world.burn()) + \\" \\", 1 /* TEXT */),
      (_openBlock(), ok
        ? _createBlock(\\"div\\", { key: 0 }, \\"yes\\")
        : _createBlock(_Fragment, { key: 1 }, [\\"no\\"])),
      (_openBlock(false), _createBlock(_Fragment, null, _renderList(list, (value, index) => {
        return (_openBlock(), _createBlock(\\"div\\", null, [
          _createVNode(\\"span\\", null, _toString(value + index), 1 /* TEXT */)
        ]))
      }), 128 /* UNKEYED_FRAGMENT */))
    ], 2 /* CLASS */))
  }
}"
`;

exports[`compiler: integration tests function mode w/ prefixIdentifiers: true 1`] = `
"const { toString, openBlock, createVNode, createBlock, createCommentVNode, Fragment, renderList, createTextVNode } = Vue

return function render() {
  const _ctx = this
  return (openBlock(), createBlock(\\"div\\", {
    id: \\"foo\\",
    class: _ctx.bar.baz
  }, [
    createTextVNode(toString(_ctx.world.burn()) + \\" \\", 1 /* TEXT */),
    (openBlock(), (_ctx.ok)
      ? createBlock(\\"div\\", { key: 0 }, \\"yes\\")
      : createBlock(Fragment, { key: 1 }, [\\"no\\"])),
    (openBlock(false), createBlock(Fragment, null, renderList(_ctx.list, (value, index) => {
      return (openBlock(), createBlock(\\"div\\", null, [
        createVNode(\\"span\\", null, toString(value + index), 1 /* TEXT */)
      ]))
    }), 128 /* UNKEYED_FRAGMENT */))
  ], 2 /* CLASS */))
}"
`;

exports[`compiler: integration tests module mode 1`] = `
"import { toString, openBlock, createVNode, createBlock, createCommentVNode, Fragment, renderList, createTextVNode } from \\"vue\\"

export default function render() {
  const _ctx = this
  return (openBlock(), createBlock(\\"div\\", {
    id: \\"foo\\",
    class: _ctx.bar.baz
  }, [
    createTextVNode(toString(_ctx.world.burn()) + \\" \\", 1 /* TEXT */),
    (openBlock(), (_ctx.ok)
      ? createBlock(\\"div\\", { key: 0 }, \\"yes\\")
      : createBlock(Fragment, { key: 1 }, [\\"no\\"])),
    (openBlock(false), createBlock(Fragment, null, renderList(_ctx.list, (value, index) => {
      return (openBlock(), createBlock(\\"div\\", null, [
        createVNode(\\"span\\", null, toString(value + index), 1 /* TEXT */)
      ]))
    }), 128 /* UNKEYED_FRAGMENT */))
  ], 2 /* CLASS */))
}"
`;
