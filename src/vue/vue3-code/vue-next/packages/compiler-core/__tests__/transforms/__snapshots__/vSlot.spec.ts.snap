// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler: transform component slots dynamically named slots 1`] = `
"const { toString, resolveComponent, createVNode, createBlock, openBlock } = Vue

return function render() {
  const _ctx = this
  const _component_Comp = resolveComponent(\\"Comp\\")
  
  return (openBlock(), createBlock(_component_Comp, null, {
    [_ctx.one]: ({ foo }) => [toString(foo), toString(_ctx.bar)],
    [_ctx.two]: ({ bar }) => [toString(_ctx.foo), toString(bar)],
    _compiled: true
  }, 256 /* DYNAMIC_SLOTS */))
}"
`;

exports[`compiler: transform component slots explicit default slot 1`] = `
"const { toString, resolveComponent, createVNode, createBlock, openBlock } = Vue

return function render() {
  const _ctx = this
  const _component_Comp = resolveComponent(\\"Comp\\")
  
  return (openBlock(), createBlock(_component_Comp, null, {
    default: ({ foo }) => [toString(foo), toString(_ctx.bar)],
    _compiled: true
  }))
}"
`;

exports[`compiler: transform component slots implicit default slot 1`] = `
"const { createVNode, resolveComponent, createBlock, openBlock } = Vue

return function render() {
  const _ctx = this
  const _component_Comp = resolveComponent(\\"Comp\\")
  
  return (openBlock(), createBlock(_component_Comp, null, {
    default: () => [
      createVNode(\\"div\\")
    ],
    _compiled: true
  }))
}"
`;

exports[`compiler: transform component slots named slot with v-for w/ prefixIdentifiers: true 1`] = `
"const { toString, resolveComponent, renderList, createSlots, createVNode, createBlock, openBlock } = Vue

return function render() {
  const _ctx = this
  const _component_Comp = resolveComponent(\\"Comp\\")
  
  return (openBlock(), createBlock(_component_Comp, null, createSlots({ _compiled: true }, [
    renderList(_ctx.list, (name) => {
      return {
        name: name,
        fn: () => [toString(name)]
      }
    })
  ]), 256 /* DYNAMIC_SLOTS */))
}"
`;

exports[`compiler: transform component slots named slot with v-if + prefixIdentifiers: true 1`] = `
"const { toString, resolveComponent, createSlots, createVNode, createBlock, openBlock } = Vue

return function render() {
  const _ctx = this
  const _component_Comp = resolveComponent(\\"Comp\\")
  
  return (openBlock(), createBlock(_component_Comp, null, createSlots({ _compiled: true }, [
    (_ctx.ok)
      ? {
          name: \\"one\\",
          fn: (props) => [toString(props)]
        }
      : undefined
  ]), 256 /* DYNAMIC_SLOTS */))
}"
`;

exports[`compiler: transform component slots named slot with v-if + v-else-if + v-else 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { resolveComponent: _resolveComponent, createSlots: _createSlots, createVNode: _createVNode, createBlock: _createBlock, openBlock: _openBlock } = _Vue
    
    const _component_Comp = _resolveComponent(\\"Comp\\")
    
    return (_openBlock(), _createBlock(_component_Comp, null, _createSlots({ _compiled: true }, [
      ok
        ? {
            name: \\"one\\",
            fn: () => [\\"foo\\"]
          }
        : orNot
          ? {
              name: \\"two\\",
              fn: (props) => [\\"bar\\"]
            }
          : {
              name: \\"one\\",
              fn: () => [\\"baz\\"]
            }
    ]), 256 /* DYNAMIC_SLOTS */))
  }
}"
`;

exports[`compiler: transform component slots named slot with v-if 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { resolveComponent: _resolveComponent, createSlots: _createSlots, createVNode: _createVNode, createBlock: _createBlock, openBlock: _openBlock } = _Vue
    
    const _component_Comp = _resolveComponent(\\"Comp\\")
    
    return (_openBlock(), _createBlock(_component_Comp, null, _createSlots({ _compiled: true }, [
      ok
        ? {
            name: \\"one\\",
            fn: () => [\\"hello\\"]
          }
        : undefined
    ]), 256 /* DYNAMIC_SLOTS */))
  }
}"
`;

exports[`compiler: transform component slots named slots 1`] = `
"const { toString, resolveComponent, createVNode, createBlock, openBlock } = Vue

return function render() {
  const _ctx = this
  const _component_Comp = resolveComponent(\\"Comp\\")
  
  return (openBlock(), createBlock(_component_Comp, null, {
    one: ({ foo }) => [toString(foo), toString(_ctx.bar)],
    two: ({ bar }) => [toString(_ctx.foo), toString(bar)],
    _compiled: true
  }))
}"
`;

exports[`compiler: transform component slots nested slots scoping 1`] = `
"const { toString, resolveComponent, createVNode, createBlock, openBlock } = Vue

return function render() {
  const _ctx = this
  const _component_Inner = resolveComponent(\\"Inner\\")
  const _component_Comp = resolveComponent(\\"Comp\\")
  
  return (openBlock(), createBlock(_component_Comp, null, {
    default: ({ foo }) => [
      createVNode(_component_Inner, null, {
        default: ({ bar }) => [toString(foo), toString(bar), toString(_ctx.baz)],
        _compiled: true
      }, 256 /* DYNAMIC_SLOTS */),
      \\" \\",
      toString(foo),
      toString(_ctx.bar),
      toString(_ctx.baz)
    ],
    _compiled: true
  }))
}"
`;
