// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler: codegen ArrayExpression 1`] = `
"
return function render() {
  with (this) {
    return [
      foo,
      bar(baz)
    ]
  }
}"
`;

exports[`compiler: codegen CacheExpression 1`] = `
"
export default function render() {
  const _ctx = this
  const _cache = _ctx.$cache
  return _cache[1] || (_cache[1] = foo)
}"
`;

exports[`compiler: codegen CacheExpression w/ isVNode: true 1`] = `
"
export default function render() {
  const _ctx = this
  const _cache = _ctx.$cache
  return _cache[1] || (
    setBlockTracking(-1),
    _cache[1] = foo,
    setBlockTracking(1),
    _cache[1]
  )
}"
`;

exports[`compiler: codegen ConditionalExpression 1`] = `
"
return function render() {
  with (this) {
    return ok
      ? foo()
      : orNot
        ? bar()
        : baz()
  }
}"
`;

exports[`compiler: codegen Element (callExpression + objectExpression + TemplateChildNode[]) 1`] = `
"
return function render() {
  with (this) {
    return _createVNode(\\"div\\", {
      id: \\"foo\\",
      [prop]: bar,
      [foo + bar]: bar
    }, [
      _createVNode(\\"p\\", { \\"some-key\\": \\"foo\\" })
    ], 16)
  }
}"
`;

exports[`compiler: codegen SequenceExpression 1`] = `
"
return function render() {
  with (this) {
    return (foo, bar(baz))
  }
}"
`;

exports[`compiler: codegen assets 1`] = `
"
return function render() {
  with (this) {
    const _component_Foo = _resolveComponent(\\"Foo\\")
    const _component_bar_baz = _resolveComponent(\\"bar-baz\\")
    const _component_barbaz = _resolveComponent(\\"barbaz\\")
    const _directive_my_dir = _resolveDirective(\\"my_dir\\")
    
    return null
  }
}"
`;

exports[`compiler: codegen comment 1`] = `
"
return function render() {
  with (this) {
    return _createCommentVNode(\\"foo\\")
  }
}"
`;

exports[`compiler: codegen compound expression 1`] = `
"
return function render() {
  with (this) {
    return _ctx.foo + _toString(bar)
  }
}"
`;

exports[`compiler: codegen forNode 1`] = `
"
return function render() {
  with (this) {
    return (foo, bar)
  }
}"
`;

exports[`compiler: codegen function mode preamble 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { createVNode: _createVNode, resolveDirective: _resolveDirective } = _Vue
    
    return null
  }
}"
`;

exports[`compiler: codegen function mode preamble w/ prefixIdentifiers: true 1`] = `
"const { createVNode, resolveDirective } = Vue

return function render() {
  const _ctx = this
  return null
}"
`;

exports[`compiler: codegen hoists 1`] = `
"
const _hoisted_1 = hello
const _hoisted_2 = { id: \\"foo\\" }

return function render() {
  with (this) {
    return null
  }
}"
`;

exports[`compiler: codegen ifNode 1`] = `
"
return function render() {
  with (this) {
    return (foo, bar)
  }
}"
`;

exports[`compiler: codegen interpolation 1`] = `
"
return function render() {
  with (this) {
    return _toString(hello)
  }
}"
`;

exports[`compiler: codegen module mode preamble 1`] = `
"import { createVNode, resolveDirective } from \\"vue\\"

export default function render() {
  const _ctx = this
  return null
}"
`;

exports[`compiler: codegen prefixIdentifiers: true should inject _ctx statement 1`] = `
"
return function render() {
  const _ctx = this
  return null
}"
`;

exports[`compiler: codegen static text 1`] = `
"
return function render() {
  with (this) {
    return \\"hello\\"
  }
}"
`;
