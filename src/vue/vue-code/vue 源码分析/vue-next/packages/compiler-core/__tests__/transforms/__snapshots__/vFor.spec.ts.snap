// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler: v-for codegen basic v-for 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (item) => {
      return (_openBlock(), _createBlock(\\"span\\"))
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen keyed template v-for 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (item) => {
      return (_openBlock(), _createBlock(_Fragment, { key: item }, [
        \\"hello\\",
        _createVNode(\\"span\\")
      ]))
    }), 64 /* KEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen keyed v-for 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (item) => {
      return (_openBlock(), _createBlock(\\"span\\", { key: item }))
    }), 64 /* KEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen skipped key 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (item, __, index) => {
      return (_openBlock(), _createBlock(\\"span\\"))
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen skipped value & key 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (_, __, index) => {
      return (_openBlock(), _createBlock(\\"span\\"))
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen skipped value 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (_, key, index) => {
      return (_openBlock(), _createBlock(\\"span\\"))
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen template v-for 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (item) => {
      return (_openBlock(), _createBlock(_Fragment, null, [
        \\"hello\\",
        _createVNode(\\"span\\")
      ]))
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen template v-for w/ <slot/> 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, renderSlot: _renderSlot } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (item) => {
      return _renderSlot($slots, \\"default\\")
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen v-for on <slot/> 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, renderSlot: _renderSlot } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (item) => {
      return _renderSlot($slots, \\"default\\")
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen v-for on element with custom directive 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode, withDirectives: _withDirectives, resolveDirective: _resolveDirective } = _Vue
    
    const _directive_foo = _resolveDirective(\\"foo\\")
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(list, (i) => {
      return (_openBlock(), _withDirectives(_createBlock(\\"div\\", null, null, 32 /* NEED_PATCH */), [
        [_directive_foo]
      ]))
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-for codegen v-if + v-for 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { openBlock: _openBlock, renderList: _renderList, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode, createCommentVNode: _createCommentVNode } = _Vue
    
    return (_openBlock(), ok
      ? _createBlock(_Fragment, { key: 0 }, _renderList(list, (i) => {
          return (_openBlock(), _createBlock(\\"div\\"))
        }), 128 /* UNKEYED_FRAGMENT */)
      : _createCommentVNode(\\"v-if\\", true))
  }
}"
`;

exports[`compiler: v-for codegen value + key + index 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { renderList: _renderList, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createVNode: _createVNode } = _Vue
    
    return (_openBlock(false), _createBlock(_Fragment, null, _renderList(items, (item, key, index) => {
      return (_openBlock(), _createBlock(\\"span\\"))
    }), 128 /* UNKEYED_FRAGMENT */))
  }
}"
`;
